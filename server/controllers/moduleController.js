const modules = require('../data/modules.json');

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ID
const isValidId = (id) => {
  return !isNaN(parseInt(id)) && parseInt(id) > 0 && parseInt(id) <= modules.length;
};

// @desc    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏
// @route   GET /api/modules
// @access  Public
const getModules = (req, res) => {
  try {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –º–æ–¥—É–ª–µ–π —Å –∏–∫–æ–Ω–∫–∞–º–∏
    const modulesList = modules.map(module => ({
      id: module.id,
      title: module.title,
      shortDescription: module.shortDescription,
      icon: module.icon || 'üìä' // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    }));
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º return –¥–ª—è —è–≤–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    return res.status(200).json(modulesList);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥—É–ª–µ–π:', error);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥—É–ª–µ–π' });
  }
};

// @desc    –ü–æ–ª—É—á–∏—Ç—å –º–æ–¥—É–ª—å –ø–æ ID
// @route   GET /api/modules/:id
// @access  Public
const getModuleById = (req, res) => {
  try {
    const id = req.params.id;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è ID
    if (!isValidId(id)) {
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –º–æ–¥—É–ª—è' });
    }
    
    const module = modules.find(m => m.id === parseInt(id));
    
    if (!module) {
      return res.status(404).json({ message: '–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–ø—Ä–∏–º–µ—Ä)
    const sanitizedModule = {
      ...module,
      title: module.title.replace(/<[^>]*>?/gm, ''), // –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
      description: module.description ? module.description.replace(/<[^>]*>?/gm, '') : '',
      shortDescription: module.shortDescription.replace(/<[^>]*>?/gm, '')
    };
    
    return res.status(200).json(sanitizedModule);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è —Å ID ${req.params.id}:`, error);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è' });
  }
};

module.exports = {
  getModules,
  getModuleById
};